[{"categories":null,"content":"Themes This site is created using Hugo static site generator and LoveIt theme, but it looks like I might need to switch to successor themes - either CodeIT or uBlogger. Theme Stars Forks LoveIt CodeIT uBlogger ","date":"2021-01-12","objectID":"/icode/about/:0:1","tags":null,"title":"About","uri":"/icode/about/"},{"categories":null,"content":"Source The source files for this blog are hosted on Github. ","date":"2021-01-12","objectID":"/icode/about/:0:2","tags":null,"title":"About","uri":"/icode/about/"},{"categories":null,"content":"Being just several days into a package makes you a good reviewer. The impressions are fresh and mastering some new functionality is still a delight. This is where I am with Poetry, a next-generation Python package and virtual environment manager. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:0:0","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"My previous workflow My previous workflow was not too sophisticated and there was not much purity with package versions. I had an Anaconda installation and occasionally added packages to global environment (yes, I did). I was isolating a package when needed to test remotely with Github Actions. For that I created an environment with venv, installed dependencies there and freezed them into requirements.txt with pip. There was a setup.py for PyPi-based projects, which I hestated to touch after I got it to work. Also maintained a separate requirements-dev.txt just to take note of extra tools I was using. There where no binaries, so nothing required conda in my case. Why change that? My interest to Poetry actually came from looking for a better project file structure. That led me to review Hypermodern Python Packaging, which I started to adopt gradually. For example, I already used pytest, black, isort and mypy, but still see no additional value for me in nox test runner or more linters inside the project. Never quite liked remembering a path to activate.bat to be able to switch the environment on (now I can use poetry shell). I thought a text-based configuration file can hold package information, not setup.py (which I had hard time editing) Poetry was not the first thing to adopt from Hypermodern Packaging, but I realised that: Poetry defines a package file structure for you package is controlled by `pyproject.toml there is a clever mechanism to resolve and lock dependencies Also had some prejudice against pipenv, which targets same goal as Poetry, but was not maintained for about a year. The big difference is that pipenv is based on the same setuptools, while poetry has its own engine for PEP 517 backend. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:1:0","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"My new workflow I tried poetry for a new project and liked the result. Here is a minimal example: pip install poetry poetry new wee cd wee echo \"Let's see how the config file looks like\" cat pyproject.toml poetry add pandas poetry add -D sphinx echo \"Without `poetry install` your package 'wee' is not in the environment\" poetry install echo \"There is a simple unit test already configured\" poetry run pytest poetry show --tree ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:2:0","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"What I learned There are a few things I wish someone told me from a start of using Poetry. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:3:0","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"There is always an environment in use The main thing to keep in mind is that Poetry always creates an virtual environment and runs everything in it. There is always some environment in use by Poetry. There are two ways to enter the environment, one is poetry shell + exit after you are done. Another is poetry run followed by what what you want to run in the environment, for example poetry run pytest to invoke pytest in environment. Where are the environment files? Which environment is active and where is the environment directory? If you use just one environment, you might not even care, this is something Poetry took care of for you and put in own folder. I activated in-project option: poetry config virtualenvs.in-project true Now I can see .venv folder exlicitly, added it .venv to .gitignore and I can explore what is inside and even delete it by hand if everything else fails. You can hack Poetry to work on global environment, but that is not the best use of it, you loose functionality by doing that. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:3:1","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"You can specify Python version in project.toml Poetry will set the Python version based on your global environment, but you can change the version. In my case the default would be: [tool.poetry.dependencies] python = \"^3.8\" For example, Google Colab currently uses Python 3.6.9, so I can possibly fix that version if I want my package to run on Colab. However, some package configurations will not run even on sister Python versions. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:3:2","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"You can add dependencies to package, tooling or as extras This is well-documented in the manual. You can see what changed pyproject.toml poetry add pandas poetry add -D black cat pyproject.toml ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:3:3","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"You must install your own package to environment (!) After poetry add pandas pandas is available in your environment, poetry run python -c \"import pandas\" should work. But form the start you own package (say, foo) is not installed. You have to add it with poetry install. I often forgot that step and that left me wondering why things did not work. This is a step similar to pip install -e . ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:3:4","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"Poetry-based project is installable with pip (!) Just like this: pip install pip install git+https://github.com/epogrebnyak/ssg-dataset No need to create setup.py or requirements.txt. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:3:5","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"You can bump a version number with a command Try any of: pip version major pip version minor pip version patch and see how pyproject.toml changed: [tool.poetry] version = \"1.1.2\" ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:3:6","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"… but pkg.version is not affected This will affect the version seen for PyPI distribution, but not the ___version___ in the package, so there is a bit of disconnect there. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:3:7","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"Poetry leaves your version control decisions to you Poetry is not integrated with version control (probably for good). When you create a new project with Poetry it is up to you to thnk of a way to upload it to Github or Gitlab. For publishing to PyPI there is a dedicated command poetry publish. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:3:8","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"Some bumps noticed Building a tree sometimes takes over 100 seconds, even on some seemingly simple package addition. Poetry env command has strange help in CLI which is better explained in the docs. I had lock into fix a specific virtualenv version to make Poetry work on Windows, but it is fixed now in new virtualenv release. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:3:9","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"When to use Poetry Poetry is very enabling if you: already use virtual environments release to PyPI often do not depend on setuptools for some special features not locked to conda for binaries already use pytest as your testing framework Give it a try! Fun fact\r\rPoetry escaped from benevolent disctatorship of Guido (and so did dependabot). You missed mypy. Simpler docs use markdown, not ReST (Sphinx). Black is overrated unless your team argues over style a lot. You don't need Pylint if you're using flake8. Never heard of poetry or dependabot. And you should use a CI solution, e.g. Travis-CI, to run your tests. — Guido van Rossum (@gvanrossum) February 11, 2020 \r\r ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:4:0","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"In December 2018 Yuras Shumovich gave me a delightful and gentle introduction to Haskell, that keeps me interested in the language ever since. ","date":"2019-05-17","objectID":"/icode/seven_classes_in_haskell/:0:0","tags":["haskell"],"title":"Seven classes in Haskell","uri":"/icode/seven_classes_in_haskell/"},{"categories":null,"content":"Functional programming While I did not progress beyond classroom projects in Haskell, the functional programming ideas (purity and typefulness) affected the way I write code in Python: I often miss the . operator for chaining functions with currying dependency injection is not that big of a trick I treat Enum more favourably as a proxy for algebraic data type dataclasses, where I can (wait, maybe a tuple would be good enough) mypy for type checking, even as annotations separation of IO and pure functions make a pipeline starting from raw immutable data, don’t mutate the data ","date":"2019-05-17","objectID":"/icode/seven_classes_in_haskell/:1:0","tags":["haskell"],"title":"Seven classes in Haskell","uri":"/icode/seven_classes_in_haskell/"},{"categories":null,"content":"It is social The social part of Haskell is also intriguing. Some people would treat their knowledge of Haskell as a sign of technical, intellectual and even moral superiority, but many would be willing to share their knowledge and support you. In my case, I was lucky to have Yuras as a teacher and mentor. But what if you have not yet found any Haskell peers: Online Zurihac is great venue to dive into Haskell and ask around. There are two Telegram channels for Haskell in Russian, accepting questions in English too: Haskell Start for beginners and Haskell for advanced discussions. I’m often surprised how smart and well-informed people are there. I maintain a larger collection of learning resources for Haskell here, maybe something catches your eye. ","date":"2019-05-17","objectID":"/icode/seven_classes_in_haskell/:2:0","tags":["haskell"],"title":"Seven classes in Haskell","uri":"/icode/seven_classes_in_haskell/"},{"categories":null,"content":"Yes, you can use Haskell Zarak, my collegue in remote work who also joined Yuras course, went on much further in using Haskell for real projects. He is experimenting with IHP, a new framework create CRUD apps, written in Haskell. ","date":"2019-05-17","objectID":"/icode/seven_classes_in_haskell/:3:0","tags":["haskell"],"title":"Seven classes in Haskell","uri":"/icode/seven_classes_in_haskell/"},{"categories":null,"content":"Here I documented the astonishments while learning the Julia programming language. The orginal article is published on DEV.to. At the time I was a bit unhappy about package recompilation, but did not use Revise.jl that should have prevented it. The links list in the article is still one of its most useful parts. There are several recent helpful additions, that I put below. ","date":"2018-12-03","objectID":"/icode/julia_surprise_me/:0:0","tags":["julia"],"title":"Julia, surprise me!","uri":"/icode/julia_surprise_me/"},{"categories":null,"content":"Julia for pythonistas A really in-depth #JuliaLang for Pythonistas Colab notebook by @aureliengeron. The notebook will install the Julia environment and @GoogleColab provides free GPUs!https://t.co/VNQs4MWJ6l pic.twitter.com/rilOxhvGV8 — Viral B. Shah (@Viral_B_Shah) June 29, 2020 ","date":"2018-12-03","objectID":"/icode/julia_surprise_me/:1:0","tags":["julia"],"title":"Julia, surprise me!","uri":"/icode/julia_surprise_me/"},{"categories":null,"content":"Julia Telegram channel We have a Russian telegram chat about Julia and these people have no fear of any data or modelling problem, also very supportive, I think this happens more often in younger than mature languages. — Evgeny Pogrebnyak (@PogrebnyakE) December 28, 2020 https://t.me/JuliaLanguage/16337 ","date":"2018-12-03","objectID":"/icode/julia_surprise_me/:2:0","tags":["julia"],"title":"Julia, surprise me!","uri":"/icode/julia_surprise_me/"},{"categories":null,"content":"Break Away from Stata Making my first steps in #JuliaLang. So far I like it. pic.twitter.com/gsKCYvXaW1 — Paul Hünermund (@PHuenermund) January 9, 2021 ","date":"2018-12-03","objectID":"/icode/julia_surprise_me/:3:0","tags":["julia"],"title":"Julia, surprise me!","uri":"/icode/julia_surprise_me/"}]