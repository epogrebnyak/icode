[{"categories":null,"content":"Being just several days into a package makes you a good reviewer. The impressions are fresh and mastering some new functionality is still a delight. This is where I am with Poetry, a next-generation Python package and virtual environment manager. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:0:0","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"Part 1: ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:1:0","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"My previous workflow My previous workflow was not too sophisticated and there was not much purity with package versions. I had an Anaconda installation and occasionally added packages to global environment (yes, I did). I was isolating a package when needed to test remotely with Github Actions. For that I created an environment with venv, installed dependencies there and freezed them into requirements.txt with pip. There was a setup.py for PyPi-based projects, which I hestated to touch after I got it to work. Also maintained a separate requirements-dev.txt just to take note of extra tools I was using. There where no binaries, so nothing required conda in my case. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:1:1","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"Why change that? My interest to Poetry actually came from looking for a better project file structure. That led me to review Hypermodern Python Packaging, which I started to adopt gradually. For example, I already used pytest, black, isort and mypy, but still see no additional value for me in nox test runner or more linters inside the project. Never quite liked remembering a path to activate.bat to be able to switch the environment on (now I can use poetry shell). I thought a text-based configuration file can hold package information, not setup.py (which I had hard time editing) Poetry was not the first thing to adopt from Hypermodern Packaging, but I realised that: Poetry defines a package file structure for you package is controlled by `pyproject.toml there is a clever mechanism to resolve and lock dependencies Also had some prejudice against pipenv, which targets same goal as Poetry, but was not maintained for about a year. The big difference is that pipenv is based on the same setuptools, while poetry has its own engine for PEP 517 backend. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:1:2","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"My new workflow I tried poetry for a new project and liked the result. Here is a minimal example: pip install poetry poetry new wee cd wee echo \"Let's see how the config file looks like\" cat pyproject.toml poetry add pandas poetry add -D sphinx echo \"Without `poetry install` your original package 'wee' is not in the env\" poetry install echo \"There is a test sceleton with simple unit test that should pass\" poetry run pytest ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:1:3","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"Part 2: Were there any difficulties? Coming up next. ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:2:0","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"When to use Poetry Poetry is very enabling if: you already understand and use virtual environments you release to PyPI often do not depend on setuptools for some special features and not locked to conda for binaries already use pytest as your testing framework ","date":"2021-01-11","objectID":"/icode/five_days_into_poetry/:3:0","tags":["python"],"title":"Five Days Into  Poetry","uri":"/icode/five_days_into_poetry/"},{"categories":null,"content":"In December 2018 Yuras Shumovich gave me a delightful and gentle introduction to Haskell, that keeps me interested in the language ever since. ","date":"2019-05-17","objectID":"/icode/seven_classes_in_haskell/:0:0","tags":["haskell"],"title":"Seven classes in Haskell","uri":"/icode/seven_classes_in_haskell/"},{"categories":null,"content":"Functional programming While I did not progress beyond classroom projects in Haskell, the functional programming ideas (purity and typefulness) affected the way I write code in Python: I often miss the . operator for chaining functions with currying dependency injection is not that big of a trick I treat Enum more favourably as a proxy for algebraic data type dataclasses, where I can (wait, maybe a tuple would be good enough) mypy for type checking, even as annotations separation of IO and pure functions make a pipeline starting from raw immutable data, don’t mutate the data ","date":"2019-05-17","objectID":"/icode/seven_classes_in_haskell/:1:0","tags":["haskell"],"title":"Seven classes in Haskell","uri":"/icode/seven_classes_in_haskell/"},{"categories":null,"content":"It is social The social part of Haskell is also intriguing. Some people would treat their knowledge of Haskell as a sign of technical, intellectual and even moral superiority, but many would be willing to share their knowledge and support you. In my case, I was lucky to have Yuras as a teacher and mentor. But what if you have not yet found any Haskell peers: Online Zurihac is great venue to dive into Haskell and ask around. There are two Telegram channels for Haskell in Russian, accepting questions in English too: Haskell Start for beginners and Haskell for advanced discussions. I’m often surprised how smart and well-informed people are there. I maintain a larger collection of learning resources for Haskell here, maybe something catches your eye. ","date":"2019-05-17","objectID":"/icode/seven_classes_in_haskell/:2:0","tags":["haskell"],"title":"Seven classes in Haskell","uri":"/icode/seven_classes_in_haskell/"},{"categories":null,"content":"Yes, you can use Haskell Zarak, my collegue in remote work who also joined Yuras course, went on much further in using Haskell for real projects. He is experimenting with IHP, a new framework create CRUD apps, written in Haskell. ","date":"2019-05-17","objectID":"/icode/seven_classes_in_haskell/:3:0","tags":["haskell"],"title":"Seven classes in Haskell","uri":"/icode/seven_classes_in_haskell/"},{"categories":null,"content":"Here I documented the astonishments while learning the Julia programming language. The orginal article is published on DEV.to. At the time I was a bit unhappy about package recompilation, but did not use Revise.jl that should have prevented it. The links list in the article is still one of its most useful parts. There are two recent helpful additions, that I put below. ","date":"2018-12-03","objectID":"/icode/julia_surprise_me/:0:0","tags":["julia"],"title":"Julia, surprise me!","uri":"/icode/julia_surprise_me/"},{"categories":null,"content":"Julia for pythonistas A really in-depth #JuliaLang for Pythonistas Colab notebook by @aureliengeron. The notebook will install the Julia environment and @GoogleColab provides free GPUs!https://t.co/VNQs4MWJ6l pic.twitter.com/rilOxhvGV8 — Viral B. Shah (@Viral_B_Shah) June 29, 2020 ","date":"2018-12-03","objectID":"/icode/julia_surprise_me/:1:0","tags":["julia"],"title":"Julia, surprise me!","uri":"/icode/julia_surprise_me/"},{"categories":null,"content":"Julia Telegram channel We have a Russian telegram chat about Julia and these people have no fear of any data or modelling problem, also very supportive, I think this happens more often in younger than mature languages. — Evgeny Pogrebnyak (@PogrebnyakE) December 28, 2020 https://t.me/JuliaLanguage/16337 ","date":"2018-12-03","objectID":"/icode/julia_surprise_me/:2:0","tags":["julia"],"title":"Julia, surprise me!","uri":"/icode/julia_surprise_me/"}]